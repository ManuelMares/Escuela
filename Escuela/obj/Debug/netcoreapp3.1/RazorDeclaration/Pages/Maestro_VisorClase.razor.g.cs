// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Escuela.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Manuel\source\repos\Escuela\Escuela\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Manuel\source\repos\Escuela\Escuela\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Manuel\source\repos\Escuela\Escuela\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Manuel\source\repos\Escuela\Escuela\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Manuel\source\repos\Escuela\Escuela\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Manuel\source\repos\Escuela\Escuela\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Manuel\source\repos\Escuela\Escuela\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Manuel\source\repos\Escuela\Escuela\_Imports.razor"
using Escuela;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Manuel\source\repos\Escuela\Escuela\_Imports.razor"
using Escuela.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "C:\Users\Manuel\source\repos\Escuela\Escuela\Pages\Maestro_VisorClase.razor"
using Escuela.Data;

#line default
#line hidden
#nullable disable
    public partial class Maestro_VisorClase : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 1000 "C:\Users\Manuel\source\repos\Escuela\Escuela\Pages\Maestro_VisorClase.razor"
       
    #region ESTE ES EL SET QUE REQUIERES PARA INICAR CADA VISTA
    public Grupo Grupo = new Grupo("Grupo1", "Anita", 2021, 2);
    public bool bandera = false;
    protected override async Task OnInitializedAsync()
    {
        if (bandera == false)
        {
            Iniciar();
        }
    }
    private void Iniciar()
    {
        CargarGrupo();
        CargarTiposActividades();
        CargarCalificaciones_ActividadAlumno();
        CargarAsistencias();
        bandera = true;
    }
    public void CargarGrupo()
    {
        DateTime horario = new DateTime(2021, 01, 25);
        Horario horarioClase = new Horario(horario, horario);

        Grupo.Alumnos.Add(new Alumno(new List<string> { "Maria", "rosa" }, new List<string> { "Lopez", "Herrera" },
        "Mari", new DateTime(1996, 09, 06), "Grupo1", "", Grupo.Alumnos.Count() + 1));
        Grupo.Alumnos.Add(new Alumno(new List<string> { "Juan", "Luis" }, new List<string> { "Hernandez", "Lopez" },
            "El chino", new DateTime(1991, 09, 24), "Grupo1", "", Grupo.Alumnos.Count() + 1));
        Grupo.Alumnos.Add(new Alumno(new List<string> { "pablo", "Miguel" }, new List<string> { "Rodriguez", "Rodriguez" },
        "Migue", new DateTime(1996, 09, 06), "Grupo1", "", Grupo.Alumnos.Count() + 1));
        Grupo.Alumnos.Add(new Alumno(new List<string> { "José", "Juan" }, new List<string> { "Gonzalez", "Gonzalez" },
            "Juanito", new DateTime(2001, 12, 12), "Grupo1", "", Grupo.Alumnos.Count() + 1));
        Grupo.Alumnos.Add(new Alumno(new List<string> { "Maria", "Luisa" }, new List<string> { "Lopez", "Lopez" },
            "Malu", new DateTime(1994, 12, 23), "Grupo1", "", Grupo.Alumnos.Count() + 1));
        Grupo.Alumnos.Add(new Alumno(new List<string> { "Juan", "Miguel" }, new List<string> { "Hernandez", "Herrera" },
            "Juanmi", new DateTime(1996, 09, 06), "Grupo1", "", Grupo.Alumnos.Count() + 1));
        Grupo.Alumnos.Add(new Alumno(new List<string> { "Luis", "Maria" }, new List<string> { "Rodriguez", "Lopez" },
            "May", new DateTime(1991, 09, 24), "Grupo1", "", Grupo.Alumnos.Count() + 1));
        Grupo.Alumnos.Add(new Alumno(new List<string> { "pablo", "Juan" }, new List<string> { "Gonzalez", "Rodriguez" },
        "chino", new DateTime(1996, 09, 06), "Grupo1", "", Grupo.Alumnos.Count() + 1));
        Grupo.Alumnos.Add(new Alumno(new List<string> { "Francisco", "José" }, new List<string> { "Lopez", "Gonzalez" },
            "Pepe", new DateTime(2001, 12, 12), "Grupo1", "", Grupo.Alumnos.Count() + 1));
        Grupo.Alumnos.Add(new Alumno(new List<string> { "Miguel", "José" }, new List<string> { "Hernandez", "Herrera" },
            "Pepito", new DateTime(1994, 12, 23), "Grupo1", "", Grupo.Alumnos.Count() + 1));

        Grupo.Controlador_Clase_Crear("Clase1", Grupo.Colores[Grupo.Clases.Count()], 2021, horarioClase);
        Grupo.Controlador_Clase_Crear("Clase2", Grupo.Colores[Grupo.Clases.Count()], 2021, horarioClase);
        Grupo.Controlador_Clase_Crear("Clase3", Grupo.Colores[Grupo.Clases.Count()], 2021, horarioClase);

    }
    public void CargarTiposActividades()
    {
        DateTime horario = new DateTime(2021, 01, 25);
        Horario horarioClase = new Horario(horario, horario);
        List<string> RecursosIds = new List<string>() { };

        Grupo.Controlador_Recurso_Crear("recurso 1", "este es un recurso", "www.bing.com", new List<string>() { "tareas", "actividades" },
            new List<string>() { "seesaw", "youtube" }, horario);
        Grupo.Controlador_Recurso_Crear("recurso 2", "este es un recurso", "www.bing.com", new List<string>() { "tareas", "actividades" },
            new List<string>() { "seesaw", "youtube" }, horario);
        Grupo.Controlador_Recurso_Crear("recurso 3", "este es un recurso", "www.bing.com", new List<string>() { "tareas", "actividades" },
            new List<string>() { "seesaw", "youtube" }, horario);
        Grupo.Controlador_Recurso_Crear("recurso 4", "este es un recurso", "www.bing.com", new List<string>() { "tareas", "actividades" },
            new List<string>() { "seesaw", "youtube" }, horario);
        Grupo.Controlador_Recurso_Crear("recurso 5", "este es un recurso", "www.bing.com", new List<string>() { "tareas", "actividades" },
            new List<string>() { "seesaw", "youtube" }, horario);
        Grupo.Recursos_Carpetas.Add("tareas");
        Grupo.Recursos_Carpetas.Add("actividades");
        Grupo.Recursos_Carpetas.Add("videos");
        Grupo.Recursos_Carpetas.Add("seesaw");
        Grupo.Recursos_Carpetas.Add("youtube");
        Grupo.Recursos_Carpetas.Add("otros");

        Grupo.Recursos_Etiquetas.Add("tareas");
        Grupo.Recursos_Etiquetas.Add("actividades");
        Grupo.Recursos_Etiquetas.Add("videos");
        Grupo.Recursos_Etiquetas.Add("seesaw");
        Grupo.Recursos_Etiquetas.Add("youtube");
        Grupo.Recursos_Etiquetas.Add("otros");

        //Agregar parámetros
        foreach (var clase in Grupo.Clases)
        {
            Grupo.Controlador_EvaluacionParametro_Crear(clase.Nombre, new Dictionary<string, double>() {
            { "Examen", 3}, { "Actividad", 2},
            { "Sin calificacion", 0}, { "Tarea", 2},
            { "Proyecto", 3}, { "Extra", 2}});
        }

        //Agregar los recursos creados
        foreach (var recurso in Grupo.Recursos)
        {
            RecursosIds.Add(recurso.Id);
        }

        //Agregar las actividades
        foreach (var clase in Grupo.Actividades)
        {
            foreach (var tipo in clase.Value)
            {
                Grupo.Controlador_Actividad_Crear(clase.Key, "actividad 1", tipo.Key, "instruccion de hacer actividad 1",
                    horario, horario, "esta es una nota para la actividad 1", 1, RecursosIds);
                Grupo.Controlador_Actividad_Crear(clase.Key, "actividad 2", tipo.Key, "instruccion de hacer actividad 2",
                    horario, horario, "esta es una nota para la actividad 2", 1, RecursosIds);
                Grupo.Controlador_Actividad_Crear(clase.Key, "actividad 3", tipo.Key, "instruccion de hacer actividad 3",
                    horario, horario, "esta es una nota para la actividad 3", 1, RecursosIds);
                Grupo.Controlador_Actividad_Crear(clase.Key, "actividad 4", tipo.Key, "instruccion de hacer actividad 4",
                    horario, horario, "esta es una nota para la actividad 4", 1, RecursosIds);
                Grupo.Controlador_Actividad_Crear(clase.Key, "actividad 5", tipo.Key, "instruccion de hacer actividad 5",
                    horario, horario, "esta es una nota para la actividad 5", 1, RecursosIds);
                Grupo.Controlador_Actividad_Crear(clase.Key, "actividad 6", tipo.Key, "instruccion de hacer actividad 6",
                    horario, horario, "esta es una nota para la actividad 6", 1, RecursosIds);
                Grupo.Controlador_Actividad_Crear(clase.Key, "actividad 7", tipo.Key, "instruccion de hacer actividad 7",
                    horario, horario, "esta es una nota para la actividad 7", 1, RecursosIds);
                Grupo.Controlador_Actividad_Crear(clase.Key, "actividad 8", tipo.Key, "instruccion de hacer actividad 8",
                    horario, horario, "esta es una nota para la actividad 8", 1, RecursosIds);
            }
        };

    }
    public void CargarCalificaciones_ActividadAlumno()
    {
        ///cada alumno tiene un diccionario de diccionarios donde:
        ///{clase: {actividad: calificación} }
        ///primero see agregará el dicionario {clase : new diccionario} en el primer foreach de alumnos
        ///en el segundo foreach de alumnos de están agregar las calificaciones de cada actividad en la clase

        foreach (var clase in Grupo.Actividades)
        {
            foreach (var tipo in clase.Value)
            {
                foreach (var actividad in tipo.Value)
                {
                    foreach (var alumno in Grupo.Alumnos)
                    {
                        Grupo.Controlador_Actividad_ActualizarCalificacion(clase.Key, tipo.Key, actividad.Nombre, 8, alumno.Id);
                    }
                }
            }
        }
    }
    public void CargarAsistencias()
    {
        foreach (var alumno in Grupo.Alumnos)
        {
            alumno.Asistencia_ActualizarPorcentaje(1);
            alumno.Asistencias_Agregar();
            alumno.Asistencias_Agregar();
            alumno.Asistencias_Agregar();
            alumno.Asistencias_Agregar();
            alumno.Asistencias_Agregar();
        }
    }
    #endregion



    public bool banderaClase = false;
    public bool banderaEditarClase = false;
    public Clase ClaseEscogida;
    public int ClaseIndice;
    public string ClaseEditorMensaje = "";
    public string nuevoNombreClase = "";
    public bool admitirCambiosClase = true;


    public bool banderaActivdad = false;
    public bool banderaEditarActividad = false;
    public string nuevoNombreActividad = "";
    public Actividad actividadEscogida;
    public int actividadIndice;
    public string tipoActividadEscogida;
    public string ActividadEditorMensaje;
    public bool admitirCambiosActividad;
    public List<Recurso> listaRecursosActividad;


    public bool banderaNuevaActividad = false;
    public bool banderaCategoriaActividad = false;
    public string ActividadNuevaClase = "";

    public bool banderaEditarAlumno = false;
    public Alumno alumnoAEditar;
    public string alumnoEditarId = "";

    public bool banderaRecursos = false;
    public Recurso nuevoRecurso = new Recurso("", "", "", new DateTime(2021, 02, 28), new List<String>() { }, new List<String>() { });
    public List<Recurso> recursosNoEnlazados = new List<Recurso>() { };
    public List<Recurso> recursosSiEnlazados = new List<Recurso>() { };
    public string mensajeRecurso = "";
    public string RecursoEditar = "";
    public int RecursoEditarIndice = -1;


    public int decimales = 2;
    public List<string> filtroTipoActividades = new List<string>();


    public string mostrarAsistencia = "contenedorContraido";
    public string mostrarPromedios = "contenedorContraido";

    public void ActualizarNombreGrupo(string nombre)
    {
        Grupo.Actualizar_Nombre(nombre);
    }

    public void ActualizarGeneracionGrupo(int generacion)
    {
        Grupo.Actualizar_Generacion(generacion);
    }

    public void ActualizarGradoGrupo(string grado)
    {
        Grupo.Actualizar_Grado(grado);
    }

    public void VerOcultarContenedorAsistencia()
    {
        if (mostrarAsistencia == "contenedorContraido")
        {
            mostrarAsistencia = "contenedorExpandido";
        }
        else
        {
            mostrarAsistencia = "contenedorContraido";
        }
    }

    public void VerOcultarContenedorPromedio()
    {
        if (mostrarPromedios == "contenedorContraido")
        {
            mostrarPromedios = "contenedorExpandido";
        }
        else
        {
            mostrarPromedios = "contenedorContraido";
        }
    }


    public void EliminarClase()
    {
        string claseBorrada = ClaseEscogida.Nombre;
        ClaseEscogida = null;
        banderaClase = false;
        ClaseIndice = -1;
        Grupo.Controlador_Clase_Eliminar(claseBorrada);
    }

    public void AgregarClase()
    {
        DateTime horario = new DateTime(2021, 01, 25);
        Horario horarioClase = new Horario(horario, horario);
        string nombreClase = "Clase" + (Grupo.Clases.Count() + 1);
        Grupo.Controlador_Clase_Crear(nombreClase, Grupo.Colores[Grupo.Clases.Count()], 2021, horarioClase);
        int index = Grupo.Clases.IndexOf(Grupo.Clases.Where(p => p.Nombre == nombreClase).FirstOrDefault());
        ClaseIndice = index;
        ClaseEscogida = Grupo.ClonarClase(Grupo.Clases[index]);
        banderaClase = true;
        FiltrarTodosTiposActividades();
        banderaEditarClase = true;
    }

    public void MostrarClase(Clase clase)
    {
        ClaseEscogida = Grupo.ClonarClase(clase);
        int index = Grupo.Clases.IndexOf(Grupo.Clases.Where(p => p.Id == clase.Id).FirstOrDefault());
        ClaseIndice = index;
        banderaClase = true;
        FiltrarTodosTiposActividades();
    }

    public void EditarClase()
    {
        banderaEditarClase = true;
    }

    public void DescartarCambiosClase()
    {
        ClaseEscogida = Grupo.ClonarClase(Grupo.Clases[ClaseIndice]);
        banderaEditarClase = false;
        nuevoNombreClase = "";
        ClaseEditorMensaje = "";
        admitirCambiosClase = true;
    }

    public void GuardarCambiosClase()
    {
        if (nuevoNombreClase == null || nuevoNombreClase == "")
        {
            nuevoNombreClase = ClaseEscogida.Nombre;
            ClaseEditorMensaje = "";
        }

        int index = Grupo.Clases.IndexOf(Grupo.Clases.Where(p => p.Nombre == nuevoNombreClase).FirstOrDefault());

        if (ClaseIndice == index || index < 0)
        {
            if (ClaseEscogida.ClasePorcentaje >= 0)
            {
                if (admitirCambiosClase == true)
                {
                    Grupo.Controlador_Clase_ActualizarPropiedades(ClaseIndice, nuevoNombreClase, ClaseEscogida.Color,
                        ClaseEscogida.Generacion, ClaseEscogida.Horario, ClaseEscogida.ClasePorcentaje);
                    ClaseIndice = Grupo.Clases.IndexOf(Grupo.Clases.Where(p => p.Nombre == nuevoNombreClase).FirstOrDefault());
                    ClaseEscogida = Grupo.Clases[ClaseIndice];
                    banderaEditarClase = false;
                    nuevoNombreClase = "";
                    ClaseEditorMensaje = "";
                    admitirCambiosClase = true;

                }
                else
                {
                    ClaseEditorMensaje = "Por favor revise todos los parámetros";
                    admitirCambiosClase = false;
                }

            }
            else
            {
                ClaseEditorMensaje = "El porcentaje de la clase debe ser al menos cero [0]";
                admitirCambiosClase = false;
            }
        }
        else
        {
            ClaseEditorMensaje = "Nombre está en uso";
            admitirCambiosClase = false;
        }

    }

    public void CerrarEditarClase()
    {
        banderaEditarClase = false;
    }

    public void ActualizarColor(string color)
    {
        ClaseEscogida.ActualizarColor(color);
    }

    public void AgregarParametro()
    {
        string nombre = "Nuevo Parametro" + (ClaseEscogida.PromediosTipo.Count() + 1).ToString();
        Grupo.Controlador_EvaluacionParametro_Crear(ClaseEscogida.Nombre, new Dictionary<string, double>() { { nombre, 1 } });
        ClaseEscogida.PromediosTipo_Crear("Nuevo Parametro" + (ClaseEscogida.PromediosTipo.Count() + 1).ToString(), 0, 1);
    }

    public void ConfirmarEliminacionParametro()
    {

    }

    public void actualizarNombreParametro(string parametro, string nuevoNombre)
    {
        if (nuevoNombre != null && nuevoNombre != "")
        {
            if (ClaseEscogida.PromediosTipo.ContainsKey(parametro) && !ClaseEscogida.PromediosTipo.ContainsKey(nuevoNombre))
            {
                ClaseEscogida.PromediosTipo_ActualizaNombre(parametro, nuevoNombre);
                ClaseEditorMensaje = "";
                admitirCambiosClase = true;
            }
            else
            {
                if (parametro == nuevoNombre)
                {
                    ClaseEscogida.PromediosTipo_ActualizaNombre(parametro, nuevoNombre);
                    ClaseEditorMensaje = "";
                    admitirCambiosClase = true;
                }

                ClaseEditorMensaje = "El parámetro no ha sido encontrado o el nuevo nombre ya está en uso";
                admitirCambiosClase = false;
            }
        }
        else
        {
            ClaseEditorMensaje = "El parametro debe tener un nombre";
            admitirCambiosClase = false;
        }
    }

    public void actualizarValorParametro(string parametro, double valor)
    {
        if (valor >= 0)
        {
            ClaseEscogida.PromediosTipo_ActualizaPorcentaje(parametro, valor);
            ClaseEditorMensaje = "";
            admitirCambiosClase = true;
        }
        else
        {
            ClaseEscogida.PromediosTipo_ActualizaPorcentaje(parametro, valor);
            ClaseEditorMensaje = "El valor del parámetro debe ser mayor a cero [0]";
            admitirCambiosClase = false;
        }

    }

    public void FiltrarTodosTiposActividades()
    {
        filtroTipoActividades = new List<string>();
        foreach (var tipo in ClaseEscogida.PromediosTipo)
        {
            filtroTipoActividades.Add(tipo.Key);
        }
    }



    public void CrearNuevaActividad()
    {
        tipoActividadEscogida = Grupo.Actividades[ClaseEscogida.Nombre].ElementAt(0).Key;
        Grupo.Controlador_Actividad_Crear(ClaseEscogida.Nombre, "nueva actividad", tipoActividadEscogida, "",
            DateTime.Today, DateTime.Today, "", 1, new List<string>());

        actividadIndice = Grupo.Actividades[Grupo.Clases[ClaseIndice].Nombre][tipoActividadEscogida].IndexOf(Grupo.Actividades[Grupo.Clases[ClaseIndice].Nombre][tipoActividadEscogida].Where(p => p.Nombre == "nueva actividad").FirstOrDefault());
        actividadEscogida = Grupo.ClonarActividad(Grupo.Actividades[Grupo.Clases[ClaseIndice].Nombre][tipoActividadEscogida][actividadIndice]);
        listaRecursosActividad = Grupo.ClonarRecursosDeActividad(Grupo.Actividades[Grupo.Clases[ClaseIndice].Nombre][tipoActividadEscogida][actividadIndice].RecursosId);
        banderaActivdad = true;
        banderaEditarActividad = true;
    }

    public void EliminarActividad()
    {
        banderaActivdad = false;
        actividadIndice = -1;
        string nombre = actividadEscogida.Nombre;
        string tipo = tipoActividadEscogida;
        actividadEscogida = null;
        tipoActividadEscogida = null;
        Grupo.Controlador_Actividad_Eliminar(Grupo.Clases[ClaseIndice].Nombre, tipo, nombre);
    }


    public void MostrarDetallesActividad(Actividad actividad, string tipoNombre)
    {
        banderaActivdad = true;
        actividadIndice = Grupo.Actividades[Grupo.Clases[ClaseIndice].Nombre][tipoNombre].IndexOf(Grupo.Actividades[Grupo.Clases[ClaseIndice].Nombre][tipoNombre].Where(p => p.Nombre == actividad.Nombre).FirstOrDefault());
        actividadEscogida = Grupo.ClonarActividad(actividad);
        tipoActividadEscogida = tipoNombre;
        listaRecursosActividad = Grupo.ClonarRecursosDeActividad(actividad.RecursosId);
    }

    public void ModalEditarActividad()
    {
        banderaEditarActividad = true;
    }

    public void DescartarCambiosActividad()
    {
        actividadEscogida = Grupo.ClonarActividad(Grupo.Actividades[Grupo.Clases[ClaseIndice].Nombre][tipoActividadEscogida][actividadIndice]);
        banderaEditarActividad = false;
        nuevoNombreActividad = "";
        ActividadEditorMensaje = "";
        admitirCambiosActividad = true;
    }

    public void GuardarCambiosActividad()
    {
        if (nuevoNombreActividad == null || nuevoNombreActividad == "")
        {
            nuevoNombreActividad = Grupo.Actividades[Grupo.Clases[ClaseIndice].Nombre][tipoActividadEscogida][actividadIndice].Nombre;
            ActividadEditorMensaje = "";
            admitirCambiosActividad = true;
        }

        if (admitirCambiosClase == true)
        {
            Grupo.Controlador_Actividad_ActualizarDatos(Grupo.Clases[ClaseIndice].Nombre, Grupo.Actividades[Grupo.Clases[ClaseIndice].Nombre][tipoActividadEscogida][actividadIndice].Nombre,
                nuevoNombreActividad, Grupo.Actividades[Grupo.Clases[ClaseIndice].Nombre][tipoActividadEscogida][actividadIndice].TipoActividad, actividadEscogida.TipoActividad,
                actividadEscogida.Instruccion, actividadEscogida.FechaAsignacion, actividadEscogida.FechaEntrega, actividadEscogida.Nota, actividadEscogida.Porcentaje);

            banderaEditarActividad = false;
            ActividadEditorMensaje = "";
            nuevoNombreActividad = "";
            actividadEscogida = Grupo.ClonarActividad(Grupo.Actividades[Grupo.Clases[ClaseIndice].Nombre][tipoActividadEscogida][actividadIndice]);
        }
        else
        {
            ActividadEditorMensaje = "Por favor revise que todos los parámetros sean correctos";
            admitirCambiosActividad = false;
        }
    }

    public void ActualizarNombreActividad(string nombre)
    {
        int coincidencias = 0;
        foreach (var tipo in Grupo.Actividades[Grupo.Clases[ClaseIndice].Nombre])
        {
            foreach (var actividad in tipo.Value)
            {
                if (actividad.Nombre == nombre)
                {
                    coincidencias++;
                    ActividadEditorMensaje = "El nombre de la actividad ya está en uso";
                    admitirCambiosActividad = false;
                }
            }
        }
        if (Grupo.Actividades[Grupo.Clases[ClaseIndice].Nombre][tipoActividadEscogida][actividadIndice].Nombre == nombre && coincidencias > 0)
        {
            coincidencias = coincidencias - 1;
            ActividadEditorMensaje = "";
        }

        if (coincidencias == 0)
        {
            ActividadEditorMensaje = "";
            admitirCambiosActividad = true;
            nuevoNombreActividad = nombre;
        }
        else
        {
            ActividadEditorMensaje = "Inválido";
            ActividadEditorMensaje = "El nombre de la actividad ya está en uso";
            admitirCambiosActividad = false;
        }
    }


    public void DisminuirNumeroLista(int numero)
    {
        Grupo.Controlador_Alumno_DisminuirNumeroLista(numero);
    }

    public void AumentarNumeroLista(int numero)
    {
        Grupo.Controlador_Alumno_AumentarNumeroLista(numero);
        StateHasChanged();
    }

    public void ActualizarCalificacion(string tipoNombre, string actividadNombre, double calificacion, string alumnoId)
    {
        if (calificacion >= 0 && calificacion <= 10)
        {
            Grupo.Controlador_Actividad_ActualizarCalificacion(ClaseEscogida.Nombre, tipoNombre, actividadNombre, calificacion, alumnoId);

        }
        else
        {
            int indice = Grupo.Alumnos.IndexOf(Grupo.Alumnos.Where(p => p.Id == alumnoId).FirstOrDefault());
            Grupo.Controlador_Actividad_ActualizarCalificacion(ClaseEscogida.Nombre, tipoNombre, actividadNombre,
            Grupo.Alumnos[indice].calificaciones_ClaseTipoActividad_ValorPorcentaje[ClaseEscogida.Nombre][tipoNombre][actividadNombre]["calificacion"],
            alumnoId);
        }
    }






    async Task CopiarLink(string link)
    {
        string texto = link;
        await JsRuntime.InvokeVoidAsync("CopiarLink", texto);
    }

    async Task CopiarInfoRecurso(Recurso recurso)
    {
        string nombre = recurso.Nombre;
        string link = recurso.Link;
        string fecha = recurso.Fecha.ToString("dd/MM/yyyy");
        await JsRuntime.InvokeVoidAsync("CopiarInfoRecurso", nombre, link, fecha);
    }

    public void AgregarRecursos()
    {
        banderaRecursos = true;
        Recurso nuevoRecurso = new Recurso("", "", "", new DateTime(2021, 02, 28), new List<String>() { }, new List<String>() { });
        foreach (var recurso in Grupo.Recursos)
        {
            if (actividadEscogida.RecursosId.Contains(recurso.Id))
            {
                recursosSiEnlazados.Add(recurso);
            }
            else
            {
                recursosNoEnlazados.Add(recurso);
            }

        }
    }

    public void EliminarDeRecursosEnlazdos(Recurso recurso)
    {
        recursosNoEnlazados.Add(recurso);
        recursosSiEnlazados.Remove(recurso);
        actividadEscogida.RecursosId_Eliminar(recurso.Id);
        listaRecursosActividad.Remove(recurso);
        Grupo.Actividades[ClaseEscogida.Nombre][tipoActividadEscogida][actividadIndice].Recursos_Eliminar(recurso.Id);
    }

    public void AgregarARecursosEnlazdos(Recurso recurso)
    {
        recursosSiEnlazados.Add(recurso);
        recursosNoEnlazados.Remove(recurso);
        actividadEscogida.RecursosId.Add(recurso.Id);
        listaRecursosActividad.Add(recurso);
        Grupo.Actividades[ClaseEscogida.Nombre][tipoActividadEscogida][actividadIndice].RecursosId_Agregar(new List<string>() { recurso.Id });
    }

    public void CerrarModalAgregarRecursos()
    {
        banderaRecursos = false;
        Recurso nuevoRecurso = new Recurso("", "", "", new DateTime(2021, 02, 28), new List<String>() { }, new List<String>() { });
        recursosSiEnlazados = new List<Recurso>() { };
        recursosNoEnlazados = new List<Recurso>() { };
    }

    public void EditarRecurso(Recurso recurso)
    {
        nuevoRecurso = recurso;
        RecursoEditar = recurso.Nombre;
        RecursoEditarIndice = Grupo.Recursos.IndexOf(recurso);
    }

    public void CrearNuevoRecurso()
    {
        if (RecursoEditarIndice > 0)
        {
            if (nuevoRecurso.Nombre != null && nuevoRecurso.Nombre != "")
            {
                Grupo.Recursos[RecursoEditarIndice] = nuevoRecurso;
                mensajeRecurso = "";
                nuevoRecurso = new Recurso("", "", "", new DateTime(2021, 02, 28), new List<String>() { }, new List<String>() { });
                RecursoEditar = "";
                RecursoEditarIndice = -1;
            }
            else
            {
                mensajeRecurso = "Por favor indique un nombre (no usado previamente)";
            }
        }
        else
        {
            int index = Grupo.Recursos.IndexOf(Grupo.Recursos.Where(p => p.Nombre == nuevoRecurso.Nombre).FirstOrDefault());
            if (nuevoRecurso.Nombre != null && nuevoRecurso.Nombre != "" && index < 0)
            {
                Grupo.Recursos.Add(nuevoRecurso);
                recursosSiEnlazados.Add(nuevoRecurso);
                mensajeRecurso = "";
                nuevoRecurso = new Recurso("", "", "", new DateTime(2021, 02, 28), new List<String>() { }, new List<String>() { });
            }
            else
            {
                mensajeRecurso = "Por favor indique un nombre (no usado previamente)";
            }
        }


    }

    public void AgregarEtiqueta_NuevoRecurso(string etiqueta)
    {
        if (nuevoRecurso.Etiquetas.Contains(etiqueta))
        {
            nuevoRecurso.Etiquetas_Eliminar(etiqueta);
        }
        else
        {
            nuevoRecurso.Etiquetas_Agregar(new List<string>() { etiqueta });
        }
    }

    public void AgregarCarpeta_NuevoRecurso(string carpeta)
    {
        if (nuevoRecurso.Carpetas.Contains(carpeta))
        {
            nuevoRecurso.Carpetas_Eliminar(carpeta);
        }
        else
        {
            nuevoRecurso.Carpetas_Agregar(new List<string>() { carpeta });
        }
    }

    public void DesvincularRecurso(Recurso recurso)
    {
        actividadEscogida.RecursosId_Eliminar(recurso.Id);
        listaRecursosActividad.Remove(recurso);
        Grupo.Actividades[ClaseEscogida.Nombre][tipoActividadEscogida][actividadIndice].Recursos_Eliminar(recurso.Id);
    }



    public void ActualizarAsistencia(string id, DateTime fecha)
    {
        int index = Grupo.Alumnos.IndexOf(Grupo.Alumnos.Where(p => p.Id == id).FirstOrDefault());
        if (Grupo.Alumnos[index].Asistencias[fecha] == false)
        {
            Grupo.Alumnos[index].Asistencias_ActualizarValor(fecha, false);
        }
        else
        {
            Grupo.Alumnos[index].Asistencias_ActualizarValor(fecha, true);
        }
    }

    public void ActualizarFechaAsistencia(DateTime fechaVieja, DateTime fechaNueva)
    {
        foreach (var alumno in Grupo.Alumnos)
        {
            alumno.Asistencias_ActualizarFecha(fechaVieja, fechaNueva);
        }
    }

    public void CrearNuevaFechaAsistencia()
    {
        foreach (var alumno in Grupo.Alumnos)
        {
            alumno.Asistencias_Agregar();
        }
    }

    public void EliminarFechaAsistencia(DateTime fecha)
    {
        foreach (var alumno in Grupo.Alumnos)
        {
            alumno.Asistencias_Eliminar(fecha);
        }
    }

    public void actualizarPorcentajeAsistencia(double porcentaje)
    {
        foreach (var alumno in Grupo.Alumnos)
        {
            alumno.Asistencia_ActualizarPorcentaje(porcentaje);
        }
    }



    public void EliminarAlumno(string idAlumno)
    {
        Grupo.Controlador_Alumno_Eliminar(idAlumno);
        int contador = 1;
        foreach (var alumno in Grupo.Alumnos)
        {
            alumno.Actualizar_NumeroLista(contador);
            contador++;
        }
    }

    public void AgregarAlumno()
    {
        string nombre = "Nuevo Alumno " + (Grupo.Alumnos.Count() + 1);
        Grupo.Controlador_Alumno_Crear(new List<string> { nombre }, new List<string> { "Apellidos" },
        "", DateTime.Today, Grupo.Nombre, "", Grupo.Alumnos.Count() + 1);
        nombre = "Nuevo Alumno " + (Grupo.Alumnos.Count());
    }

    public void EditarAlumno(string alumnoId)
    {
        int index = Grupo.Alumnos.IndexOf(Grupo.Alumnos.Where(p => p.Id == alumnoId).FirstOrDefault());
        banderaEditarAlumno = true;
        alumnoEditarId = Grupo.Alumnos[index].Id;
        alumnoAEditar = Grupo.ClonarAlumno(Grupo.Alumnos[index]);
    }

    public void GuardarCambiosAlumno()
    {
        banderaEditarAlumno = false;
        Grupo.Controlador_Alumno_ActualizarPropiedades(alumnoAEditar, alumnoEditarId);
        alumnoAEditar = null;
        alumnoEditarId = "";
    }

    public void DescartarCambiosAlumno()
    {
        banderaEditarAlumno = false;
        alumnoAEditar = null;
        alumnoEditarId = "";
    }

    public void AlumnoEditar_Nombres(string nombres)
    {
        string[] nombresNuevos = nombres.Split();
        List<string> lista = new List<string>() { };
        foreach (var nombre in nombresNuevos)
        {
            lista.Add(nombre);
        }
        alumnoAEditar.ActualizarApellidos(lista);

    }

    public void AlumnoEditar_Apellidos(string apellidos)
    {
        string[] apellidosNuevos = apellidos.Split();
        List<string> lista = new List<string>() { };
        foreach (var nombre in apellidosNuevos)
        {
            lista.Add(nombre);
        }
        alumnoAEditar.ActualizarApellidos(lista);
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JsRuntime { get; set; }
    }
}
#pragma warning restore 1591
